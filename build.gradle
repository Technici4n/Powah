import com.google.gson.Gson
import com.google.gson.GsonBuilder

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "me.shedaniel.unified-publishing" version "0.1.+" apply false
    id 'com.diffplug.spotless' version '5.14.0'
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "me.shedaniel.unified-publishing"

    repositories {
        maven { url "https://maven.parchmentmc.org" } //Parchment
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings(loom.layered {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.18.2:2022.05.22@zip")
        })
    }

    architectury {
        // Disable Architectury's injectables like @ExpectPlatform
        // since we don't use them.
        injectInjectables = false
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = (System.getenv("POWAH_VERSION") ?: "v0.0.0").substring(1)
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url = "https://dvs1.progwml6.com/files/maven" } //JEI
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.release = 17
    }

    java {
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}"}
        }
    }

    if ((project.name == "fabric" || project.name == "forge") && project.version != "0.0.0") {
        unifiedPublishing {
            project {
                gameVersions = [rootProject.minecraft_version]
                gameLoaders = [project.name]
                version = project.version + "-" + project.name

                def releaseChannel = "release"
                def changes = System.getenv("CHANGELOG") ?: "No changelog provided?"
                if (project.version.toLowerCase().contains("alpha")) {
                    releaseChannel = "alpha"
                    changes = "THIS IS AN ALPHA RELEASE, MAKE A BACKUP BEFORE INSTALLING AND FREQUENTLY WHILE PLAYING, AND PLEASE REPORT ANY ISSUE YOU MAY FIND ON THE ISSUE TRACKER.\n\n" + changes
                } else if (project.version.toLowerCase().contains("beta")) {
                    releaseChannel = "beta"
                    changes = "This is a beta release. It is expected to be mostly stable, but in any case please report any issue you may find.\n\n" + changes
                }

                releaseType = releaseChannel
                changelog = changes
                displayName = String.format("[%s %s] v%s", project.name.toUpperCase(), rootProject.minecraft_version, project.version)

                mainPublication remapJar // Declares the publicated jar

                relations {
                    depends {
                        curseforge = "architectury-api"
                        modrinth = "architectury-api"
                    }
                    depends {
                        curseforge = "cloth-config"
                        modrinth = "cloth-config"
                    }
                }

                var cfToken = System.getenv("CF_TOKEN")
                if (cfToken != null) {
                    curseforge {
                        token = cfToken
                        id = "633483" // Required, must be a string, ID of CurseForge project

                        if (project.name == "fabric" && releaseChannel == "release") {
                            // Use beta channel for Fabric releases on CurseForge, to separate from Forge builds
                            releaseType = "beta"
                        }
                    }
                }

                var mrToken = System.getenv("MODRINTH_TOKEN")
                if (mrToken != null) {
                    modrinth {
                        token = mrToken
                        id = "KZO4S4DO" // Required, must be a string, ID of Modrinth project
                    }
                }
            }
        }
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        target '**/*.java'
        importOrder()

        removeUnusedImports()

        eclipse().configFile('eclipse-format.xml')

        indentWithSpaces()
        endWithNewline()
        // TODO: Enforce license header one day
        //licenseHeaderFile 'license_header.java'
    }
    format 'json', {
        target '**/lang/*.json'
        addStep(JsonOrderStep.create())
    }
}

import com.diffplug.spotless.FormatterFunc
import com.diffplug.spotless.FormatterStep

final class JsonOrderStep {
    private JsonOrderStep() {}
    private static final Gson GSON = new GsonBuilder().disableHtmlEscaping().setLenient().setPrettyPrinting().create();

    static FormatterStep create() {
        return FormatterStep.create(
                'jsonOrderStep',
                new State(),
                {
                    new FormatterFunc() {
                        String apply(String input) {
                            TreeMap<String, Object> jsonMap = GSON.fromJson(input, TreeMap.class);
                            String sortedJson = GSON.toJson(jsonMap);
                            String prettyPrinted = sortedJson.replace('  "', '    "').replace('\\u0027', '\'');
                            return prettyPrinted;
                        }
                    }
                },
        );
    }

    private static final class State implements Serializable {
        private static final long serialVersionUID = 1L;

        private final int formatVersion = 1;
    }
}
