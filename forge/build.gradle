plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

architectury {
    platformSetupLoomIde()
    forge()
}

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods-${project.minecraft_version}"

repositories {
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven { url = "https://maven.theillusivec4.top" } //Curios
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Forge-only deps
//    modCompileOnly "mezz.jei:jei-${project.jei_minecraft_release}-forge-api:${project.jei_version}"
    modImplementation("mezz.jei:jei-${project.jei_minecraft_release}-forge:${project.jei_version}") { transitive = false }

    modCompileOnly "top.theillusivec4.curios:curios-forge:${project.curios_version}:api"
    //modRuntimeOnly "top.theillusivec4.curios:curios-forge:${project.curios_version}"

    // Locally sourced extra mods for runtime (i.e. testing)
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        modRuntimeOnly "extra-mods:$artifactId:$version"
    }
}

loom {
    runs {
        data {
            data()
        }
    }

    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        dataGen {
            mod "powah"
        }

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        filter { line ->
            line.replace 'version="0.0.0"', "version=\"$version\""
        }
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}